import React ,{useState}  from 'react';
// import { PiEyeFill, PiEyeSlashFill } from "react-icons/pi";
// import { useFormik } from "formik";
// import * as Yup from "yup";
// import { useNavigate } from 'react-router-dom';
// import logo from '../Images/gno-wallet.png'
// import axios  from 'axios';

// function Login({ setFunctionData }) {
//   const [passwordVisible, setPasswordVisible] = useState(false);
//   const navigate = useNavigate();
//   const [error, setError] = useState(null);
  
//   const formik = useFormik({
//     initialValues: {
//       password: "",
//     },
//     validationSchema: Yup.object({
//       password: Yup.string()
//         .required("Required"),
//     }),
//     onSubmit: async (values) => {
//       try {
//         const response = await axios.get(`${process.env.REACT_APP_BACKEND}/wallet/${values.password}`);
//         if (response.data) 
//           {
//            console.log(response.data.address)
//            setFunctionData(response.data.address)
      
//           navigate("/main");
//         }
//       } catch (error) {
//         setError("Invalid password. Please try again.");
//       }
//     },
//   });

//   const togglePasswordVisibility = () => {
//     setPasswordVisible((prevState) => !prevState);
//   };

//   return (
//     <>
//     <div className=" text-white flex flex-col items-center h-[100vh] md:h-[90vh] lg:h-[90vh] xl:h-[90vh] justify-center">
//         <img
//           src={logo}
//           className="mb-5 h-[100px] w-[90px] shadow-custom"
//         />
//         <div className="flex flex-col items-center justify-center bg-[--bg-color] border-[--border-color] border shadow-sm p-4 rounded-2xl w-[300px]  sm:w-[320px] md:w-[350px] lg:w-[350px] xl:w-[350px] ">
        
//             <div className='text-center w-full '>
//                 <p className='text-lg'>Secure and trusted multi-chain crypto wallet</p>
//             </div>
//             <form onSubmit={formik.handleSubmit} className="w-full">
//             <div className="w-full relative mt-4">
//               {passwordVisible ? (
//                 <PiEyeFill onClick={togglePasswordVisibility} className="absolute top-9 right-2 text-[--green-color] font-bold cursor-pointer " />
//               ) : (
//                 <PiEyeSlashFill onClick={togglePasswordVisibility} className="absolute top-9 right-2 text-[--green-color] font-bold cursor-pointer" />
//               )}
//               <label className="text-base">Password</label>
//               <input
//                 type={passwordVisible ? "text" : "password"}
//                 className="bg-[--input-color] w-full h-[38px] px-2 focus:outline-[--green-color] outline-none"
//                 id="password"
//                 onChange={formik.handleChange}
//                 onBlur={formik.handleBlur}
//                 value={formik.values.password}
//               />
//               {formik.touched.password && formik.errors.password ? (
//                 <div className="text-red-500">{formik.errors.password}</div>
//               ) : null}
//             </div>
//             <div className='w-full my-4'>
//             <button type = "submit" className="bg-[--green-color] text-white text-base w-full rounded-full p-2 mt-4" >
//                    Unblock
//               </button>
//               {error && <p style={{ color: "red" }}>{error}</p>}
//             </div>
//             </form>
//               </div>
//         </div>
        
//     </>
//   )
// }

// export default Login


// import React, { useState, useEffect } from 'react';
// // import { useLocation, useNavigate } from 'react-router-dom';
// // import { encryptPrivateKey } from '../Utils/Crypto';
// // import axios from 'axios';
// // import logo from '../Images/gno-wallet.png'


// // function ValidatePassphrase() {
// //   const [selectedWords, setSelectedWords] = useState([]); // Initialize with an empty array
// //   const [validationIndexes, setValidationIndexes] = useState([]);
// //   const [validationError, setValidationError] = useState('');
// //   const navigate = useNavigate();
// //   const location = useLocation();
// //   const { wallet, password } = location.state;

// //   useEffect(() => {
// //     const words = wallet.phrase.split(' '); // Split passphrase by spaces
// //     const shuffledIndexes = [1, 3, 5, 7]; // Example: Choose indexes to hide
// //     setValidationIndexes(shuffledIndexes); // Set indexes for validation
// //     setSelectedWords(Array(words.length).fill('')); // Initialize with empty strings
// //   }, [wallet]);

// //   const handleValidatePassphrase = async () => {
// //     // Create an array with the filled words based on validationIndexes
// //     const filledWords = validationIndexes.map(index => selectedWords[index]?.trim());
// //     // Create an array with the full passphrase words
// //     const fullPassphraseWords = wallet.phrase.split(' ').map(word => word.trim());

// //     // Check if filled words match the corresponding words in the full passphrase
// //     const isValid = validationIndexes.every((index, i) => filledWords[i] === fullPassphraseWords[index]);

// //     if (isValid) {
// //       const encryptedPrivateKey = encryptPrivateKey(wallet.privateKey, password);
// //       const walletData = {
// //         address: wallet.address,
// //         encryptedPrivateKey,
// //         password,
// //       };
// //       try {
// //         await axios.post('${process.env.REACT_APP_BACKEND}/wallet', walletData);
// //         navigate('/success');
// //       } catch (error) {
// //         console.error('Error creating wallet:', error);
// //         setValidationError('Error creating wallet. Please try again.');
// //       }
// //     } else {
// //       setValidationError("The entered words do not match the passphrase.");
// //     }
// //   };

// //   const handleInputChange = (index, value) => {
// //     const updatedWords = [...selectedWords];
// //     updatedWords[index] = value;
// //     setSelectedWords(updatedWords);
// //     setValidationError(''); // Clear error message when user starts correcting input
// //   };

// //   return (
// //     <div className="text-white flex flex-col items-center h-[100vh] md:h-[95vh] lg:h-[80vh] xl:h-[100vh] justify-center">
// //        <img
// //           src={logo}
// //           className="mb-5 h-[90px] w-[100px] shadow-custom"
// //         />
// //       <div className="flex flex-col items-center justify-center bg-[--bg-color] border-[--border-color] border shadow-sm p-4 rounded-2xl w-[300px] sm:w-[320px] md:w-[350px] lg:w-[350px] xl:w-[350px]">
// //         <h1 className="pb-10 text-xl">Validate Passphrase Words</h1>
// //         <div className='w-full border-2 border-[--green-color] my-5'>
// //           <p className='p-3 text-balance text-center text-gray-400'>{wallet.phrase}</p>
// //         </div>
// //         <div className="grid grid-cols-2 gap-2">
// //           {wallet.phrase.split(' ').map((word, index) => (
// //             validationIndexes.includes(index) ? (
// //               <input
// //                 key={index}
// //                 type="text"
// //                 placeholder={`Word ${index + 1}`}
// //                 className="bg-[--input-color] outline-none p-2  rounded-md "
// //                 value={selectedWords[index] || ''}
// //                 onChange={(e) => handleInputChange(index, e.target.value)}
// //               />
// //             ) : (
// //               <input
// //                 key={index}
// //                 type="text"
// //                 className=" outline-none p-2 rounded-md bg-[--input-color]"
// //                 value={word}
// //                 readOnly
// //               />
// //             )
// //           ))}
// //         </div>
// //         {validationError && <p style={{ color: 'red' }}>{validationError}</p>}
// //         <button
// //           onClick={handleValidatePassphrase}
// //           className="bg-[--green-color] text-white text-base w-full rounded-full p-2 mt-4"
// //         >
// //           Create Wallet
// //         </button>
// //       </div>
// //     </div>
// //   );
// // }

// // export default ValidatePassphrase;

// import React, { useState, useEffect } from 'react';
// import { useLocation, useNavigate } from 'react-router-dom';
// import { encryptPrivateKey } from '../Utils/Crypto';
// import axios from 'axios';
// import logo from '../Images/gno-wallet.png';

// function ValidatePassphrase() {
//   const [selectedWords, setSelectedWords] = useState([]);
//   const [validationIndexes, setValidationIndexes] = useState([]);
//   const [validationError, setValidationError] = useState('');
//   const navigate = useNavigate();
//   const location = useLocation();
//   const { wallet, password } = location.state;

//   useEffect(() => {
//     const generateUniqueRandomNumbers = (min, max, count) => {
//       const numbers = new Set();
//       while (numbers.size < count) {
//         const randomNumber = Math.floor(Math.random() * (max - min + 1)) + min;
//         numbers.add(randomNumber);
//       }
//       return Array.from(numbers);
//     };

//     const words = wallet.phrase.split(' ');
//     const shuffledIndexes = generateUniqueRandomNumbers(0, 11, 4);
//     setValidationIndexes(shuffledIndexes);
//     setSelectedWords(Array(words.length).fill(''));
//   }, [wallet]);

//   const handleValidatePassphrase = async () => {
//     const filledWords = validationIndexes.map(index => selectedWords[index]?.trim());
//     const fullPassphraseWords = wallet.phrase.split(' ').map(word => word.trim());

//     const isValid = validationIndexes.every((index, i) => filledWords[i] === fullPassphraseWords[index]);

//     if (isValid) {
//       const encryptedPrivateKey = encryptPrivateKey(wallet.privateKey, password);
//       const walletData = {
//         address: wallet.address,
//         encryptedPrivateKey,
//         password,
//       };
//       try {
//         await axios.post('${process.env.REACT_APP_BACKEND}/wallet', walletData);
//         navigate('/success');
//       } catch (error) {
//         console.error('Error creating wallet:', error);
//         setValidationError('Error creating wallet. Please try again.');
//       }
//     } else {
//       setValidationError('The entered words do not match the passphrase.');
//     }
//   };

//   const handleInputChange = (index, value) => {
//     const updatedWords = [...selectedWords];
//     updatedWords[index] = value;
//     setSelectedWords(updatedWords);
//     setValidationError('');
//   };

//   return (
//     <div className="text-white flex flex-col items-center h-[100vh] md:h-[90vh] lg:h-[90vh] xl:h-[90vh] justify-center">
//       <img
//         src={logo}
//         className="mb-5 h-[90px] w-[100px] shadow-custom"
//       />
//       <div className="flex flex-col items-center justify-center bg-[--bg-color] border-[--border-color] border shadow-sm p-4 rounded-2xl w-[300px] sm:w-[320px] md:w-[350px] lg:w-[400px] xl:w-[380px]">
//         <h1 className="pb-10 text-xl">Validate Passphrase Words</h1>
//         <div className="w-full border-2 border-[--green-color] my-5">
//           <p className="p-3 text-balance text-center text-gray-400">{wallet.phrase}</p>
//         </div>
//         <div className="grid grid-cols-2 gap-2">
//           {wallet.phrase.split(' ').map((word, index) => (
//             validationIndexes.includes(index) ? (
//               <input
//                 key={index}
//                 type="text"
//                 placeholder={`Word ${index + 1}`}
//                 className="bg-[--input-color] outline-none p-2 rounded-sm border border-[--border-color]"
//                 value={selectedWords[index] || ''}
//                 onChange={(e) => handleInputChange(index, e.target.value)}
//               />
//             ) : (
//               <input
//                 key={index}
//                 type="text"
//                 className="outline-none p-2 rounded-md bg-[--input-color] border border-[--border-color]"
//                 value={word}
//                 readOnly
//               />
//             )
//           ))}
//         </div>
//         {validationError && <p style={{ color: 'red' }}>{validationError}</p>}
//         <button
//           onClick={handleValidatePassphrase}
//           className="bg-[--green-color] text-white text-base w-full rounded-full p-2 mt-4"
//         >
//           Create Wallet
//         </button>
//       </div>
//     </div>
//   );
// }

// export default ValidatePassphrase;

import React, { useState,useEffect } from "react";
// import { IoMdArrowRoundUp, IoMdArrowRoundDown } from "react-icons/io";
// import { MdSwapHorizontalCircle } from "react-icons/md";
// import { CiCreditCard1 } from "react-icons/ci";
// import Header from "./Header";
// import Navbar from "./Navbar";
// import { getWeb3 } from "../Utils/Rpc";
// import Send from "./Send";
// import Receive from "./Receive";

// function Main({walletAddress}) {
//   const [navbar, setNavbar] = useState(false);
//   const [balance, setBalance] = useState(null);
//   const [send,setSend]=useState(false);
//   const [receive,setReceive]=useState(false);
//   const [swap,setSwap]=useState(false);
//   const [buy_sell,setBuy_Sell]=useState(false);

//   const showSend = ()=>{
//     setSend(true);
//     setReceive(false);
//     setSwap(false);
//     setBuy_Sell(false);
//   }
//   const showReceive = ()=>{
//     setSend(false);
//     setReceive(true);
//     setSwap(false);
//     setBuy_Sell(false);
//   }
//   const showSwap = ()=>{
//     setSend(false);
//     setReceive(false);
//     setSwap(true);
//     setBuy_Sell(false);
//   }
//   const showBuy_Sell = ()=>{
//     setSend(false);
//     setReceive(false);
//     setSwap(false);
//     setBuy_Sell(true);
//   }

//   useEffect(() => {
//     const fetchBalance = async () => {
//       if (!walletAddress) return;

//       try {
//         const web3 = getWeb3();
//         const balanceInWei = await web3.eth.getBalance(walletAddress);
//         const balanceInEth = web3.utils.fromWei(balanceInWei, 'ether');
//         setBalance(balanceInEth);
//       } catch (error) {
//         console.error("Error fetching balance:", error);
//       }
//     };

//     fetchBalance();
//   }, [walletAddress]);

//   const handleMenu = () => {
//     setNavbar((prev) => !prev);
//   };

//   return (
//     <>
//       <Header handleMenu={handleMenu} walletAddress={walletAddress}/>
//       <Navbar isOpen={navbar} handleMenu={handleMenu} />
//       <div className="flex flex-col items-center h-full md:h-[90vh] lg:h-[90vh] xl:h-[90vh] py-8">
//       <div className="text-white text-xl md:text-2xl lg:text-3xl font-bold pb-5">$ : {balance !== null ? `${balance} xDAI` : "Loading..."}</div>
//         <div className="grid grid-cols-4 xl:gap-8 lg:gap-6 md:gap-5 sm:gap-3 gap-2 text-black">
//           <div className="flex flex-col items-center">
//             <button onClick={showSend} className="lg:p-4 md:p-3 sm:p-2 p-2 bg-[--green-color] text-white text-4xl rounded-full">
//               <IoMdArrowRoundUp />
//             </button>
//             <p className="text-white">Send</p>
//           </div>
//           <div className="flex flex-col items-center">
//             <button onClick={showReceive} className="lg:p-4 md:p-3 sm:p-2 p-2 bg-[--green-color] text-white text-4xl rounded-full">
//               <IoMdArrowRoundDown />
//             </button>
//             <p className="text-white">Receive</p>
//           </div>
//           <div className="flex flex-col items-center">
//             <button className="lg:p-4 md:p-3 sm:p-2 p-2 bg-[--green-color] text-white text-4xl rounded-full">
//               <MdSwapHorizontalCircle />
//             </button>
//             <p className="text-white">Swap</p>
//           </div>
//           <div className="flex flex-col items-center">
//             <button className="lg:p-4 md:p-3 sm:p-2 p-2 bg-[--green-color] text-white text-4xl rounded-full">
//               <CiCreditCard1 />
//             </button>
//             <p className="text-white">Buy & Sell</p>
//           </div>
//         </div>
//         {send && <Send/>}
//         {receive && <Receive/>}
//       </div>
//     </>
//   );
// }

// export default Main;

